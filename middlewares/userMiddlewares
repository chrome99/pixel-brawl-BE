const { User } = require("../models/User");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");

//  UserMiddlewares

function passworMatch(req, res, next) {
  const { password, rePassword } = req.body;
  if (password !== rePassword) {
    return res.status(400).send("passwords and repeated password do not match");
  }
  next();
}

async function isNewUser(req, res, next) {
  const user = await User.getUserByEmail(req.body.email);
  if (user) {
    return res.status(400).send("user already exists");
  }
  next();
}

function encryptPwd(req, res, next) {
  const saltRounds = 10;
  bcrypt.hash(req.body.password, saltRounds, function (err, hash) {
    if (err) {
      res.status(500).send(err.message);
    } else {
      console.log(hash);
      req.body.password = hash;
      next();
    }
  });
}

async function doesUserExist(req, res, next) {
  try {
    const user = await User.getUserByEmail(req.body.email);
    if (!user) {
      return res.status(400).send("user does not exist");
    }
    req.body.user = user;
    next();
  } catch (err) {
    console.log(err);
    res.status(500).send(err.message);
  }
}

function requireAdmin(req, res, next) {
  // Get the JWT token from the cookies
  const token = req.cookies.token;
  if (!token) {
    // If the token is not present, the user is not authenticated
    return next(errorNotAuthed());
  }

  // Verify the token
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    if (decoded.role !== "admin") {
      // If the user is not an admin, deny access
      return res.status(403).send("Forbidden");
    }
    // If the user is an admin, proceed to the next middleware/route handler
    next();
  } catch (err) {
    // If the token is invalid, deny access
    return res.status(403).send("Forbidden");
  }
}

function auth(req, res, next) {
  if (!req.cookies.token) {
    return next("User not authorized");
  }

  //get token from request cookies
  const token = req.cookies.token;

  //verify the token , decode the id
  jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {
    if (err) {
      return next(err);
    }
    const userId = decoded.id;
    req.userId = userId;
    next();
  });
}

module.exports = {
  passworMatch,
  isNewUser,
  encryptPwd,
  doesUserExist,
  requireAdmin,
  auth,
};
